"use strict";

////////////////////////////////////
//
//   Tests
//
////////////////////////////////////

var ok = require("./oK");

var fails = 0; var tests = 0;
function test(input, output) {
	try {
		var got = ok.format(ok.run(ok.parse(input), ok.baseEnv()));
		if (output && output != got) {
			console.log("TEST "+tests+" FAILED: "+input+"\nEXPECTED:\n"+output+"\nGOT:\n"+got);
			fails++;
		}
		else if (!output) { console.log(got); }
	}
	catch(err) {
		console.log("TEST "+tests+" FAILED: "+input);
		console.log(err.stack);
		fails++;
	}
	tests++;
}

function fail(input, errmsg) {
	var caught = false;
	try { ok.run(ok.parse(input), new ok.Environment(null)); }
	catch(err) {
		caught = true;
		if (err.message != errmsg) {
			console.log("TEST "+tests+" FAILED: "+input+"\nBAD ERROR, EXPECTED:\n"+errmsg+"\nGOT:");
			console.log(err.stack);
			fails++;
		}
	}
	if (!caught) {
		console.log("TEST "+tests+" FAILED: "+input+"\nNO ERROR, EXPECTED:\n"+errmsg);
		fails++;
	}
	tests++;
}

function files() {
	var fs = require("fs");
	var sourcefiles = [
		"examples/binpack.k",
		"examples/islands.k",
		"examples/strings.k",
		"examples/treedepth.k",
		"examples/idioms.k",
		"examples/runlength.k",
		"examples/lexicographic.k",
		"examples/parsing.k",
		"examples/merge.k",
		"examples/bencode.k",
	];
	for(var z=0;z<sourcefiles.length;z++) {
		var program = fs.readFileSync(sourcefiles[z], { encoding:'utf8' });
		process.stdout.write(ok.format(ok.run(ok.parse(program), ok.baseEnv())));
		process.stdout.write("\n");
	}
}

function show(input) {
	console.log(JSON.stringify(ok.parse(input), null, 2));
}

console.log("tests...");

test("3 .2 4 53.9 -8"                 , "3 0.2 4 53.9 -8"                     );
test('"foo bar quux"'                 , '"foo bar quux"'                      );
test('"K"'                            , '"K"'                                 );
test("(1 2 3;(4 5;6))"                , "(1 2 3\n (4 5\n  6))"                );
test("5#99"                           , "99 99 99 99 99"                      );
test("&1 4 2"                         , "0 1 1 1 1 2 2"                       );
test("?5 3 3 5 2 3 2"                 , "5 3 2"                               );
test("+(1 2 3;4 5 6)"                 , "(1 4\n 2 5\n 3 6)"                   );
test("|5 8 12 47"                     , "47 12 8 5"                           );
test("-!5"                            , "0 -1 -2 -3 -4"                       );
test("-(1 2;3;4 5)"                   , "(-1 -2\n -3\n -4 -5)"                );
test("(1;(2 3 4))+(5;(6 7 8))"        , "(6\n 8 10 12)"                       );
test("4+1 2 3"                        , "5 6 7"                               );
test("2 3 4>3"                        , "0 0 1"                               );
test("2*!7"                           , "0 2 4 6 8 10 12"                     );
test("+\\!3"                          , "0 1 3"                               );
test("4#+/1+!3"                       , "6 6 6 6"                             );
test("-:'1 2 3"                       , "-1 -2 -3"                            );
test("{[a;b] 2+2}"                    , "{[a;b]2+2}"                          );
test("{[x] +/1 2}"                    , "{[x]+/1 2}"                          );
test("{3;4;18+4}"                     , "{3;4;18+4}"                          );
test("x: 5; 2*x"                      , "10"                                  );
test("{$[1;2;3]}"                     , "{$[1;2;3]}"                          );
test("$[0;`a;1;`b;`c]"                , "`b"                                  );
test("$[1>2;555;97]"                  , "97"                                  );
test("28 9 4@1"                       , "9"                                   );
test("28 9 4@0 1 1 0 2"               , "28 9 9 28 4"                         );
test("{x+y}"                          , "{[x;y]x+y}"                          );
test("{y; {z}}"                       , "{[x;y]y;{[x;y;z]z}}"                 );
test("a:5;b:3;a*b"                    , "15"                                  );
test("{x*x}3"                         , "9"                                   );
test("sq:{x*x};sq 25"                 , "625"                                 );
test("(1;(2 3))=2"                    , "(0\n 1 0)"                           );
test("(1;(2 3))~2"                    , "0"                                   );
test("1 2 4~1 3 4"                    , "0"                                   );
test("3*5+1"                          , "18"                                  );
test("(3*5)+1"                        , "16"                                  );
test("{x+y}[3;5]"                     , "8"                                   );
test("{z+x*y}[3;2;1]"                 , "7"                                   );
test("prod:{x*y};prod[3;20]"          , "60"                                  );
test("{+/x}[9 10]"                    , "19"                                  );
test(",4"                             , ",4"                                  );
test("{x,9,y}/1 2 3"                  , "1 9 2 9 3"                           );
test("(1;2;;3)"                       , "(1;2;;3)"                            );
test("2+"                             , "(2+)"                                );
test(",/"                             , ",/"                                  );
test("(,/)/(1 2;3;(4;5 6))"           , "1 2 3 4 5 6"                         );
test(",//(`a;2;3;(`b;5 6))"           , "(`a;2;3;`b;5;6)"                     );
test("{$[3=x;3;x-1]}\\6"              , "6 5 4 3"                             );
test("5{1+x}\\9"                      , "9 10 11 12 13 14"                    );
test("(5){1+x}/9"                     , "14"                                  );
test("{x- 1}"                         , "{[x]x-1}"                            );
test("{x-1}"                          , "{[x]x-1}"                            );
test("{3.5- 1}"                       , "{3.5-1}"                             );
test("{3.5-1}"                        , "{3.5-1}"                             );
test("{3.5 -1}"                       , "{3.5 -1}"                            );
test("-1+1"                           , "0"                                   );
test("1-1"                            , "0"                                   );
test('#"1-1"'                         , "3"                                   );
test("{x:5;x-1}"                      , "{[x]x:5;x-1}"                        );
test("3-0.45"                         , "2.55"                                );
test("(1,1+1,1+2)"                    , "1 2 4"                               );
test("(1;1+1;1+2)"                    , "1 2 3"                               );
test("1 2 3 4"                        , "1 2 3 4"                             );
test("(1 2 3;4 5 6;7 8 9)"            , "(1 2 3\n 4 5 6\n 7 8 9)"             );
test("(0 1;(1;(1 0)))"                , "(0 1\n (1\n  1 0))"                  );
test("(`a;`b;3;4)"                    , "(`a;`b;3;4)"                         );
test("(`a;`b;(3 4))"                  , "(`a\n `b\n 3 4)"                     );
test("(1;(2;`b);(3;`c))"              , "(1\n (2;`b)\n (3;`c))"               );
test("(1 1;(2 2;(3 3;(4 4))))"        , "(1 1\n (2 2\n  (3 3\n   4 4)))"      );
test("(1;(2;(3;3;5;,4)))"             , "(1\n (2\n  (3\n   3\n   5\n   ,4)))" );
test("(3;,4)"                         , "(3\n ,4)"                            );
test("-10#1 2 3"                      , "3 1 2 3 1 2 3 1 2 3"                 ); // *
test("8#1 2 3"                        , "1 2 3 1 2 3 1 2"                     );
test("-2#4 7 18 12"                   , "18 12"                               );
test("5{x,+/-2#x}/1"                  , "1 2 3 5 8 13"                        ); // !
test('#"A"'                           , "1"                                   );
test("#3 1 4 2"                       , "4"                                   );
test("#9"                             , "1"                                   );
test('1_"stares"'                     , '"tares"'                             );
test('-2_"stares"'                    , '"star"'                              );
test("0_7"                            , "7"                                   ); // !
test("2_1 2 3 4 5"                    , "3 4 5"                               );
test("0 3 7_0 1 2 3 4 5 6 7"          , "(0 1 2\n 3 4 5 6\n ,7)"              );
test("0 4 _ 0 1 2 3 4 5"              , "(0 1 2 3\n 4 5)"                     );
test('m:"cut it";(0,&m=" ")_m'        , '("cut"\n " it")'                     );
test(",1 2 3"                         , ",1 2 3"                              );
test("*1 2 3"                         , "1"                                   );
test("*5"                             , "5"                                   );
test("_-4.6"                          , "-5"                                  );
test("_12.3 9.8 19.992"               , "12 9 19"                             );
test('+ /"comment, not over."'        , "(+)"                                 );
test('#" / "'                         , "3"                                   );
test("`a`b`c[1]"                      , "`b"                                  );
test('"foobar"[2 3 4]'                , '"oba"'                               );
test("9 8 7 6[2]"                     , "7"                                   );
test("28 9 4[0 1 1 0 2]"              , "28 9 9 28 4"                         );
test("t:5 8 7;t[1]"                   , "8"                                   );
test('t:"foobar";t[2 3 4]'            , '"oba"'                               );
test("(`f;99 98;`d)[1]"               , "99 98"                               );
test("{(1+)'3 4 5}"                   , "{(1+)'3 4 5}"                        );
test("(+)"                            , "(+)"                                 );
test("{(a+b)-1}"                      , "{(a+b)-1}"                           );
test('{(1; "a"; 3.5; `xyz) 2}'        , '{(1;"a";3.5;`xyz)@2}'                );
test('(1; "a"; 3.5; `xyz) 2'          , "3.5"                                 );
test("{t:3;t+:2;t}"                   , "{t:3;t:t+2;t}"                       );
test("t:3;t+:2;t"                     , "5"                                   );
test("<1 2 2 1"                       , "0 3 1 2"                             );
test('"dozen"[> "dozen"]'             , '"zoned"'                             );
test('"abcdef"@(5 0;(3;,4 3))'        , '("fa"\n ("d"\n  ,"ed"))'             );
test("()"                             , "()"                                  );
test("#()"                            , "0"                                   );
test("^45"                            , "0"                                   );
test("^`"                             , "1"                                   );
test("a:5;{a+x}[1]"                   , "6"                                   );
test("a:5;{a:x}[3];a"                 , "5"                                   );
test("a:5;b:{a:x;a}[3];a+b"           , "8"                                   );
test("sm:+;sm\\1 2 3"                 , "1 3 6"                               );
test("{{5}[]}"                        , "{{5}.,`}"                            );
test("{5}[]"                          , "5"                                   );
test("a:5;b:{a}[]"                    , "5"                                   );
test("{a:{99};a[]}"                   , "{a:{99};a.,`}"                       );
test("a:{99};a[]"                     , "99"                                  );
test("a:1;{a:2;{a}[]}[],a"            , "2 1"                                 ); // *
test("a:1;b:{a:2;{a}}[];{a:3;x[]}[b]" , "2"                                   ); // *
test("r:{$[x;x,r[x-1];0]}; r[4]"      , "4 3 2 1 0"                           );
test("{x+3}@2"                        , "5"                                   );
test("$0 9 7 6"                       , '(,"0"\n ,"9"\n ,"7"\n ,"6")'         );
test("$29 30"                         , '("29"\n "30")'                       );
test("$(`a;45)"                       , '(,"a"\n "45")'                       );
test('."1+2"'                         , "3"                                   );
test('a:5; ."1+a"'                    , "6"                                   );
test('"f\\noo\\"b\\tar"'              , '"f\\noo\\"b\\tar"'                   );
test('"foo\\nbar"'                    , '"foo\\nbar"'                         );
test("{x+y+z}[1]"                     , "{[x;y;z]x+y+z}[1;;]"                 );
test("{x+y+z}[1;2]"                   , "{[x;y;z]x+y+z}[1;2;]"                );
test("fa:{x+y+z}[3];fb:fa[4]"         , "{[x;y;z]x+y+z}[3;4;]"                );
test("f:{x+y}[3];f[2]"                , "5"                                   );
test("a:{x,y,z}[;1;]"                 , "{[x;y;z]x,y,z}[;1;]"                 );
test("a:{x,y,z}[;1;];b:a[;2]"         , "{[x;y;z]x,y,z}[;1;2]"                );
test("a:{x,y,z}[;1;];b:a[;2];b[3]"    , "3 1 2"                               );
test("a:{x,y,z}[;1+2;];a[3+4]"        , "{[x;y;z]x,y,z}[7;3;]"                );
test("a:((1 2;3 4);5 6);a[0;1]"       , "3 4"                                 );
test("a:((1 2;3 4);5 6);a[0;1;0]"     , "3"                                   );
test("a:((1 2;3 4);5 6);a[0;0 1;1]"   , "2 4"                                 );
test("a:((1 2;3 4);5 6);a[0 1;1]"     , "(3 4\n 6)"                           );
test('a:("abc";"def";"ghi");a[0 2]'   , '("abc"\n "ghi")'                     );
test('a:("abc";"def");a[0;2 1 1]'     , '"cbb"'                               );
test("a:((1 2;3 4);5 6);a[0;;1]"      , "2 4"                                 );
test('("abc";"def";"ghi")[1;]'        , '"def"'                               );
test('("abc";"def";"ghi")[;1]'        , '"beh"'                               );
test("{(1;2;3;{5})}[][3][]"           , "5"                                   );
test("{x,y,z}[;1;][;2][3]"            , "3 1 2"                               );
test("(1 2 3;4 5 6)[1][2]"            , "6"                                   );
test("a:(1 2 3;4 5 9);a[1][2]"        , "9"                                   );
test("{x+y}.(1;2)"                    , "3"                                   );
test("sq:{x*x};sq.(5)"                , "25"                                  ); // !
test("sq:{x*x};sq 25"                 , "625"                                 );
test("{x -1}"                         , "{[x]x@-1}"                           );
test("{d:{x+1};d(1 2)}"               , "{d:{[x]x+1};d@1 2}"                  );
test("{x+1}(2;3 4)"                   , "(3\n 4 5)"                           );
test("{2+x}'(1 2 3)"                  , "3 4 5"                               );
test("d:{3+x};d'(1;2 3)"              , "(4\n 5 6)"                           );
test("d:{0,x};d(1;2 3)"               , "(0\n 1\n 2 3)"                       );
test("a:1;cache::4+a;cache"           , "5"                                   );
test("a:1;c::4+a;b:c;a:2;b,c"         , "5 6"                                 );
test("a::b;b::c;c:4,3;a"              , "4 3"                                 );
test('a::b,c+:1;b:3;c:0;a;a;b:4;a;c'  , "3"                                   );
test("a::b+5;b:4;a;a;a;b:2;a"         , "7"                                   );
test("@[1 2 3;0;{2+x}]"               , "3 2 3"                               );
test("@[1 2 3;0;{y};8]"               , "8 2 3"                               );
test("a:1 2 3;@[`a;2;{1+x}]"          , "`a"                                  ); // *
test("a:1 2 3;@[`a;2;{1+x}];a"        , "1 2 4"                               ); // *
test("a:1 0 1;@[`a;1;{x,y};4];a"      , "(1\n 0 4\n 1)"                       ); // *
test("@[1 2 3;1 0;{1,x}]"             , "(1 1\n 1 2\n 3)"                     );
test("@[1 2 3;1 0;{x,y};8 9]"         , "(1 9\n 2 8\n 3)"                     );
test("@[1 2 3;0;{x+2*y};8 9]"         , "(17 19\n 2\n 3)"                     );
test("a:5;.`a"                        , "5"                                   );
test("f:{x+y};.`f"                    , "{[x;y]x+y}"                          );
test("{t:3 5;t[0]:9;t}"               , "{t:3 5;t:.[t;,0;{[x;y]y};9];t}"      );
test("t:3 5;t[0]:9;t"                 , "9 5"                                 );
test("t:0 1 2;t[1],:9;t"              , "(0\n 1 9\n 2)"                       );
fail("1 2 3+4 5"                      , "length error."                       );
fail("`a+2"                           , "number expected, found symbol."      );
fail("&-30"                           , "positive int expected."              );
fail("2 -3 4_1 3 4"                   , "positive int expected."              );
fail("a:b"                            , "the name 'b' has not been defined."  );
fail("a:1;a[2]"                       , "function or list expected, found number.");
fail("f:{x+y};f[1;2;3]"               , "valence error."                      );
fail("@[1;2]"                         , "function or list expected, found number.");
fail("{5;"                            , "parse error. '}' expected."          );
fail("(5"                             , "parse error. ')' expected."          );
fail("a[3"                            , "parse error. ']' expected."          );
test("a:(1 2;3 4)[;1]"                , "2 4"                                 );
test("5,/:1 2 3"                      , "(5 1\n 5 2\n 5 3)"                   );
test("(!3)+/:!3"                      , "(0 1 2\n 1 2 3\n 2 3 4)"             );
test("(!3),/:!3"                      , "(0 1 2 0\n 0 1 2 1\n 0 1 2 2)"       );
test("a:,\\;a 1 2 3"                  , "(1\n 1 2\n 1 2 3)"                   );
test("a:+/;a 1 2 3"                   , "6"                                   );
test("a:!:;a 5"                       , "0 1 2 3 4"                           );
test("|t=/:t:!3"                      , "(0 0 1\n 0 1 0\n 1 0 0)"             );
test("{t[0;2]:99}"                    , "{t:.[t;0 2;{[x;y]y};99]}"            );
test("t:(1 2 3;4 5 6);t[0;2]:99;t"    , "(1 2 99\n 4 5 6)"                    );
test("t:(1 2 3;4 5 6);t[;1]:88;t"     , "(1 88 3\n 4 88 6)"                   );
test(".[(1 2;3 4 5);1;,;999]"         , "(1 2\n 3 4 5 999)"                   ); // *
test(".[(1 2;3 4 5);1 2;,;999]"       , "(1 2\n (3\n  4\n  5 999))"           );
test(".[(1 2;3 4 5);(0 1;1);,;999]"   , "((1\n  2 999)\n (3\n  4 999\n  5))"  );
test(".[(1 2;3 4 5);(;0);,;555]"      , "((1 555\n  2)\n (3 555\n  4\n  5))"  );
test(".[(1 2;3 4 5);1 2;,;96 69]"     , "(1 2\n (3\n  4\n  5 96 69))"         );
test("(,5)#!5"                        , "0 1 2 3 4"                           );
test("2 3#!5"                         , "(0 1 2\n 3 4 0)"                     );
test("2 2 3#!5"                       , "((0 1 2\n  3 4 0)\n (1 2 3\n  4 0 1))");
test("3 3#1"                          , "(1 1 1\n 1 1 1\n 1 1 1)"             );
test(".[3 3#0;1;+;1 2 3]"             , "(0 0 0\n 1 2 3\n 0 0 0)"             ); // *
test(".[(1 2 3;4 5 6);1;(0,)]"        , "(1 2 3\n 0 4 5 6)"                   ); // *
test(".[(1 2 3;4 5 6);1 2;(0,)]"      , "(1 2 3\n (4\n  5\n  0 6))"           );
test(".[(1 2 3;4 5 6);(0 1;1);(0,)]"  , "((1\n  0 2\n  3)\n (4\n  0 5\n  6))" );
test(".[(1 2 3;4 5 6);(;0);(0,)]"     , "((0 1\n  2\n  3)\n (0 4\n  5\n  6))" );
fail("a:1 2 3;a[1.4]:5;a"             , "positive int expected."              );
test("$!5"                            , '(,"0"\n ,"1"\n ,"2"\n ,"3"\n ,"4")'  );
test('"&"\\"foo=42&bar=69"'           , '("foo=42"\n "bar=69")'               );
fail("1\\3 1 2 2 4 1 5 1"             , "list expected, found number."        );
test("1':!5"                          , "(,0\n ,1\n ,2\n ,3\n ,4)"            );
test("2':!5"                          , "(0 1\n 1 2\n 2 3\n 3 4)"             );
test("3':!5"                          , "(0 1 2\n 1 2 3\n 2 3 4)"             );
test("4':!5"                          , "(0 1 2 3\n 1 2 3 4)"                 );
test("5':!5"                          , ",0 1 2 3 4"                          );
test("9':!5"                          , "()"                                  );
test("-1':!4"                         , "(0 0 1\n 0 1 2\n 1 2 3\n 2 3 0)"     );
test("-10':!4"                        , "(0 0 1\n 0 1 2\n 1 2 3\n 2 3 0)"     );
test("0':!5"                          , "(()\n ()\n ()\n ()\n ()\n ())"       );
test('+"="\\\'"&"\\"foo=42&bar=69"'   , '(("foo"\n  "bar")\n ("42"\n  "69"))' );
test("{a::99}"                        , "{a::99}"                             );
test("a:5; {a::3}[]; a"               , "3"                                   );
test("b:1 2 3;{b[1]::4}[]; b"         , "1 4 3"                               );
test("c:99;{c+::5}[]; c"              , "104"                                 ); // !
test("{b[1]:4}"                       , "{b:.[b;,1;{[x;y]y};4]}"              );
test("{b[1]::4}"                      , "{..[`b;,1;{[x;y]y};4]}"              );
test("b:1 2 3;{b:4 3 2;b[1]:4}[]; b"  , "1 2 3"                               );
test("b:1 2 3;{b:4 3 2;b[1]::4}[]; b" , "1 4 3"                               ); // ! (segfault)
test("c:1 2 3;{c:4 3 2;c[1]+:5}[];c"  , "1 2 3"                               ); // ! (segfault)
test("c:1 2 3;{c:4 3 2;c[1]+::5}[];c" , "1 7 3"                               ); // !
test("c:8; {c:1; .`c}[]"              , "8"                                   );
test("c:8;{c:2;c+:1}[]; c"            , "8"                                   );
test("c:8;{c:2;c::1+(.`c)}[]; c"      , "9"                                   ); // *
test("c:8;{c:2;c+::1}[]; c"           , "9"                                   ); // !
test("?[1 2 3;1 1;4]"                 , "1 4 2 3"                             );
test('?["test";1 3;"u"]'              , '"tut"'                               );
test('?["hello world";0 5;"goodbye"]' , '"goodbye world"'                     );
test("?[2 7 9;1 2;2*]"                , "2 14 9"                              );
test('?["a look back";2 6;|:]'        , '"a kool back"'                       );
test("?[1 2 3;1,1;2+2]"               , "1 4 2 3"                             );
test("[a:2;b::a]"                     , "[a:2;b:2]"                           );
test("[a:1 9 5;b::a]"                 , "[a:1 9 5;b:1 9 5]"                   );
test("011b"                           , "0 1 1"                               );
test("11010b"                         , "1 1 0 1 0"                           );
test("~1"                             , "0"                                   );
test("~1 0 5"                         , "0 1 0"                               );
test("{~'(c.,x;y)}"                   , "{[x;y]~'(c.,x;y)}"                   );
test("-1,'1 2 3"                      , "(-1 1\n -1 2\n -1 3)"                );
test("-1 0 1,'1 2 3"                  , "(-1 1\n 0 2\n 1 3)"                  );
test("{1 2,\\:/:3 4}"                 , "{1 2 ,\\:/:3 4}"                     );
test("1 2,\\:/:3 4"                   , "((1 3\n  2 3)\n (1 4\n  2 4))"       );
test("1 2,/:\\:3 4"                   , "((1 3\n  1 4)\n (2 3\n  2 4))"       );
test("5+/1 2 3"                       , "11"                                  );
test("5+/,4"                          , "9"                                   );
test("5+/()"                          , "5"                                   );
test("1,/:,2"                         , ",1 2"                                );
test("+/,5"                           , "5"                                   );
test("+/5"                            , "5"                                   );
test("+\\,5"                          , ",5"                                  );
test("+\\5"                           , "5"                                   ); // !
test("+\\()"                          , "()"                                  );
test("-:'()"                          , "()"                                  );
test("{x<5}{1+x}\\2"                  , "2 3 4 5"                             );
test("{x<5}{1+x}/2"                   , "5"                                   );
test("a:{x<5};b:{1+x};a b\\2"         , "2 3 4 5"                             );
test("{a b/c}"                        , "{a b/c}"                             );
test("{a (b/c)}"                      , "{a@b/c}"                             );
test("{a.b/c}"                        , "{a.b/c}"                             );
test("{a.(b/c)}"                      , "{a.b/c}"                             );
test('"\\n"'                          , '"\\n"'                               );
test('"\\n\\n"'                       , '"\\n\\n"'                            );
test("+[;2]"                          , "+[;2]"                               );
test("+[2]"                           , "+[2;]"                               ); // !
test("-[2;3]"                         , "-1"                                  ); // !
test("{-[2]3}"                        , "{-[2;]3}"                            );
test("-[2]3"                          , "-1"                                  ); // !
test("-[;100]"                        , "-[;100]"                             );
test("-[;100]5"                       , "-95"                                 );
test("a:-[5;];a 2"                    , "3"                                   ); // !
test("a:-[5;];a[1+1]"                 , "3"                                   ); // !
test("a:-[;8];a 12"                   , "4"                                   );
test("a:-;a[7;1]"                     , "6"                                   );
test("#'1 2"                          , "(#[1;];#[2;])"                       ); // *
fail("8)"                             , "unexpected character ')'"            );
test("#:[1 2 3]"                      , "3"                                   ); // !
test("{x+y}[;5]'1 2 3"                , "6 7 8"                               );
test("(t;t:5)"                        , "5 5"                                 );
test("{2*x}5"                         , "10"                                  );
test("{2*x}-:5"                       , "-10"                                 ); // !
test("{2*x}-:5 7 8"                   , "-10 -14 -16"                         ); // !
test("{(){x,(2*y)}/1 2 3}"            , "{() {[x;y]x,2*y}/1 2 3}"             );
test("(){x,(2*y)}/1 2 3"              , "2 4 6"                               );
test("p:{[s]$[#s;{p[1_s]}[];s]};p[1 2]", "()"                                 ); // !
test("0w -0w0w0w"                     , "0w -0w 0w 0w"                        ); // *
test("(0w<5;0w>5;-0w<5;-0w>5)"        , "0 1 1 0"                             );
test("+/+/'"                          , "(+/+/')"                             );
test("t:+/+/'"                        , "(+/+/')"                             );
test("+/+"                            , "(+/+)"                               );
test("t:+/+"                          , "(+/+)"                               );
test("f:+/+/';f ((2 3);(3 5))"        , "13"                                  );
test("+/-/'"                          , "(+/-/')"                             );
test("(1+) 4"                         , "5"                                   );
test("f:1+;f 4"                       , "5"                                   );
test("a:2;f:a+;f 7"                   , "9"                                   );
test("f:(1+2)+;f 3"                   , "6"                                   );
test("*()"                            , "()"                                  );
test('|"a"'                           , '"a"'                                 );
test("|2"                             , "2"                                   );
test("{5+2}.()"                       , "7"                                   ); // *
test("a1:5;b2:37;a1+b2"               , "42"                                  );
test("{x,y}'0 1"                      , "({[x;y]x,y}[0;];{[x;y]x,y}[1;])"     ); // *
test("({x,y}'0 1).\\:3"               , "(0 3\n 1 3)"                         ); // *
test("{({x,y,z}1)2}"                  , "{({[x;y;z]x,y,z}@1)@2}"              );
test("({x,y,z}1)2"                    , "{[x;y;z]x,y,z}[1;2;]"                );
test("(2+)2"                          , "4"                                   );
test("{+[x;y]}"                       , "{[x;y]+[x;y]}"                       );
test("{t[x;y]:1}"                     , "{[x;y]t:.[t;(x;y);{[x;y]y};1]}"      );
test("{+[x;y]}.'(1 2;3 4)"            , "3 7"                                 ); // *
test("+/0#1 2 3"                      , "0"                                   );
test("*/0#1 2 3"                      , "1"                                   );
test("|/0#1 2 3"                      , "-0w"                                 );
test("&/0#1 2 3"                      , "0w"                                  );
test("a:[foo:23];a@`foo"              , "23"                                  );
test("a:[foo:23];a@`bar"              , "0N"                                  );
test("a:[foo:23];a[`foo]"             , "23"                                  );
test("a:(3;(4 5));a.(1 0)"            , "4"                                   ); // *
test("a:[foo:[bar:5]];a.(`foo `bar)"  , "5"                                   ); // *
test("a:[foo:[bar:5]];a[`foo;`bar]"   , "5"                                   );
test("a:[f:[m:5;p:9]];a[`f;`m`p]"     , "5 9"                                 );
test("a:[f:33];a[`g]:99"              , "[f:33;g:99]"                         );
test("a:[f:33];a[`f]+:4"              , "[f:37]"                              );
test("7 15,'4"                        , "(7 4\n 15 4)"                        );
test("V:!3;D:{x+y};V D/:\\:V"         , "(0 1 2\n 1 2 3\n 2 3 4)"             );
test("{t:1; 3 6 9 t}"                 , "{t:1;3 6 9@t}"                       );
test("{(x*2; 1+3*x)(2!x)}"            , "{[x](x*2;1+3*x)@2!x}"                );
test("{(x*2; 1+3*x)2!x}"              , "{[x](x*2;1+3*x)@2!x}"                );
test("{(x*2; 1+3*x)2!x}5"             , "16"                                  );
test("6 8 20(0)"                      , "6"                                   );
test('"123"-"0"'                      , "1 2 3"                               );
test("!2 3"                           , "(0 0 0 1 1 1\n 0 1 2 0 1 2)"         );
test("3!5"                            , "2"                                   );
test("2!5"                            , "1"                                   );
test("-3!7"                           , "2"                                   );
test("5!-3"                           , "2"                                   );
test("9!80"                           , "8"                                   );
test("log 5 18"                       , "1.6094 2.8904"                       );
test("exp 2"                          , "7.3891"                              );
test("10*sin 2 3"                     , "9.093 1.4112"                        );
test("10*cos 2 3"                     , "-4.1615 -9.8999"                     );
test("{10*sin!5}"                     , "{10*sin!5}"                         );
test("10*sin!5"                       , "0 8.4147 9.093 1.4112 -7.568"        );
test("2#()"                           , "(()\n ())"                           );
test("3#\"\""                         , "(()\n ()\n ())"                      ); // *
test("-4#()"                          , "(()\n ()\n ()\n ())"                 ); // *
test('#5?"abc"'                       , "5"                                   );
test('#5?"0"'                         , "5"                                   );
test('{x@<x}@?10000?"0"'              , '"0123456789:;<=>?@ABCDEFGHI"'        );
test("#10?4 7 2"                      , "10"                                  );
test("1<3?4 7 2"                      , "1 1 1"                               );
test("[a:3;b:4]"                      , "[a:3;b:4]"                           );
test("![a:5;d:7]"                     , "`a`d"                                );
test('[a:2 3 4;b:"abcd"]@`a'          , "2 3 4"                               );
test(".[a:4;b:3]"                     , "4 3"                                 );
test('="weekend"'                     , '"weknd"!(,0\n 1 2 4\n ,3\n ,5\n ,6)' );
test("=1 1 2 3 3 1 2 1"               , "1 2 3!(0 1 5 7\n 2 6\n 3 4)"         );
test("l:(9 8 9 7);g:.=l;l[g]:!#g;l"   , "0 1 0 2"                             );
test('{#:\'x}.:="abdbbac"'            , "2 3 1 1"                             );
test("=(-100 1;-7 5;1 5;1 5)"         , "(-100 1\n -7 5\n 1 5)!(,0\n ,1\n 2 3)");
test("#[a:3;b:5;c:7]"                 , "3"                                   );
test("*[a:8;b:5;c:7]"                 , "8"                                   );
test("-[a:3;b:5;c:7]"                 , "[a:-3;b:-5;c:-7]"                    );
test("~[a:3;b:0;c:1]"                 , "[a:0;b:1;c:0]"                       );
test("_[a:1.5;b:3.2]"                 , "[a:1;b:3]"                           );
test("[a:3;b:5]-1"                    , "[a:2;b:4]"                           );
test("1+[a:3;b:5]"                    , "[a:4;b:6]"                           );
test("[a:3;b:4]*[a:2;b:6]"            , "[a:6;b:24]"                          );
test("[a:3;b:5]=5"                    , "[a:0;b:1]"                           );
test("5|[a:3;b:5]"                    , "[a:5;b:5]"                           );
test("[a:3;b:5]&3"                    , "[a:3;b:3]"                           );
test("[a:3;b:5;c:7]<4"                , "[a:1;b:0;c:0]"                       );
test("[a:4]>/:1 4 6"                  , "([a:1];[a:0];[a:0])"                 );
test("[a:1],[b:2]"                    , "[a:1;b:2]"                           );
test("[a:1;b:3],[b:5]"                , "[a:1;b:5]"                           );
test("t:[a:1];t,[b:2];t"              , "[a:1]"                               );
test("1_[a:1;b:2]"                    , "[b:2]"                               );
test("1#[a:1;b:2]"                    , "[a:1]"                               );
test("|[a:3;b:4]"                     , "[b:4;a:3]"                           );
test("1#3 4 5!6 7 8"                  , "(,3)!,6"                             );
test('5!"abcdefgh"'                   ,"2 3 4 0 1 2 3 4"                      );
test('21!"abcdefgh"'                  ,"13 14 15 16 17 18 19 20"              );
test('-5!"abcdefgh"'                  ,"19 19 19 20 20 20 20 20"              );
test('{x@(#x)!(!#x)+\\:!#x}"abc"'     ,'("abc"\n "bca"\n "cab")'              );
test("1 2 3!4 5 6"                    , "1 2 3!4 5 6"                         );
test('`a`b`c!"abc"'                   ,'[a:"a";b:"b";c:"c"]'                  );
test('","/$!5'                        , '"0,1,2,3,4"'                         );
test("@[1 2 3;1;5]"                   , "1 5 3"                               );
test("@[1 2 3;(,0;,1);5]"             , "5 5 3"                               );
test("1 2 3 4 1 3^1"                  , "2 3 4 3"                             );
test("1 2 3 4 1 3^2 3"                , "1 4 1"                               );
test("5^2"                            , "0 1 3 4"                             );
test("5^1 3 4"                        , "0 2"                                 );
test("1^1"                            , ",0"                                  );
test("5+\\1 2 3"                      , "6 8 11"                              );
test("5+\\,4"                         , ",9"                                  );
test("5 1 {x+y+z}[3]\\5 1 3"          , "(13 9\n 17 13\n 23 19)"              );
test("r:{x+y+z};5 1 r[3]\\5 1 3"      , "(13 9\n 17 13\n 23 19)"              );
test("r:5 1;r{x+y+z}[3]\\5 1 3"       , "(13 9\n 17 13\n 23 19)"              );
test("5+\\()"                         , "()"                                  );
test('+"ABC"'                         , ',"ABC"'                              );
test("+(1 2 3;4)"                     , "(1 4\n 2 4\n 3 4)"                   );
test("+(1;4 5 6)"                     , "(1 4\n 1 5\n 1 6)"                   );
test("+0,+0,(1 2;3 4)"                , "(0 0 0\n 0 1 2\n 0 3 4)"             );
test('2$"abcd"'                       , '"ab"'                                );
test('7$"abcd"'                       , '"abcd   "'                           );
test('-3$"2.345"'                     , '"345"'                               );
test('-7$"abcd"'                      , '"   abcd"'                           );
test('2$"a"'                          , '"a"'                                 );
test('3$("abcd";"fa";"a";"das")'      , '("abc"\n "fa "\n "a"\n "das")'       );
test('2 3 4$("a";"b";"c")'            , '"abc"'                               );
test('2 3 4$"abc"'                    , '"abc"'                               );
test("`c$42"                          , '"*"'                                 );
test('`i$"*"'                         , "42"                                  );
test('`i$"Hello."'                    , "72 101 108 108 111 46"               );
test("`c$72 101 108 108 111 46"       , '"Hello."'                            );
test("`b$30"                          , "0"                                   );
test("`b$31"                          , "1"                                   );
test("`b$0"                           , "0"                                   );
test("`f`i`b$31"                      , "31 31 1"                             );
test("`i$45 99.4"                     , "45 99"                               );
test("-:',5"                          , ",-5"                                 );
test("0N"                             , "0N"                                  );
test("5 0N 17"                        , "5 0N 17"                             );
test("3|0N"                           , "3"                                   );
test("3 0N 0N&0N 2 0N"                , "0N 0N 0N"                            );
test("a:1 2;a[45]"                    , "0N"                                  );
test("a:1 2;a[-7]"                    , "0N"                                  );
test("1 2 3 @ 1.7"                    , "0N"                                  );
test("1 2 3[0.9]"                     , "0N"                                  );
test("5 8 2[0N]"                      , "0N"                                  );
test("1 0N=0N 0N"                     , "0 1"                                 );
test("4 +': 2 3"                      , "6 5"                                 );
test(",':!5"                          , "(,0\n 1 0\n 2 1\n 3 2\n 4 3)"        );
test(",':,1"                          , ",,1"                                 );
test(",':()"                          , "()"                                  );
test("=':3 3 2 1 2 2"                 , "0 1 0 0 0 1"                         );
test("=':0N 5 3"                      , "1 0 0"                               );
test("|':1 3 1 5 2"                   , "1 3 3 5 5"                           );
test("+':,99"                         , ",99"                                 );
test("+':1 2 3"                       , "1 3 5"                               );
test("*':2 3 7"                       , "2 6 21"                              );
test("-':1 4 9 14 25 36"              , "1 3 5 5 11 11"                       );
test("&':1 3 1 0 5"                   , "1 1 1 0 0"                           );
test("#?5"                            , "5"                                   );
test("1>?5"                           , "1 1 1 1 1"                           );
test("@3"                             , "-9"                                  );
test('@"Z"'                           , "-10"                                 );
test("@`foo"                          , "-11"                                 );
test("@()"                            , "0"                                   );
test("@ [a:2;b:3]"                    , "99"                                  );
test("@{x+y}"                         , "102"                                 );
test("t:+;  @t"                       , "107"                                 );
test("t:+/; @t"                       , "105"                                 );
test("d:{$[-1<@x;1+|/d'x;0]};d(1;2 3)", "2"                                   );
test("23 4 9 18?9"                    , "2"                                   );
test("9 8 7 6 5 4 3?1"                , "0N"                                  );
test('("abe";"i";"cat")?"i"'          , "1"                                   );
test("^0N"                            , "1"                                   );
test('"ABC"^65'                       , '"BC"'                                );
test('65 66 67?"B"'                   , "1"                                   );
test('"ABC"=65'                       , "1 0 0"                               );
test("1,/:()"                         , "()"                                  ); // *
test("(8#2)\\69"                      , "0 1 0 0 0 1 0 1"                     );
test("64 64 64\\32767"                , "7 63 63"                             );
test("64 64 64\\32768"                , "8 0 0"                               );
test("16 16\\17"                      , "1 1"                                 );
test("16 16\\18"                      , "1 2"                                 );
test("16 16\\6"                       , "0 6"                                 );
test("(8#2)/1 0 0 0 1 0 1"            , "69"                                  );
test("64 64 64/7 63 63"               , "32767"                               );
test("64 64 64/8 0 0"                 , "32768"                               );
test("5/1 2 3"                        , "38"                                  );
test("3/2 1"                          , "7"                                   );
test("3/1 0 3"                        , "12"                                  );
test("2/1 1 1 1"                      , "15"                                  );
test("1 2/1 1"                        , "3"                                   );
test("(3+)'5 3 1"                     , "8 6 4"                               );
test("(*|:)'(1 2;3 4)"                , "2 4"                                 );
test("4(|+\\)\\1 1"                   , "(1 1\n 2 1\n 3 2\n 5 3\n 8 5)"       );
test("(1+)'(1 2 3)"                   , "2 3 4"                               );
test("{e:{(0,)'x};+e@+e@x}(1 2;3 4)"  , "(0 0 0\n 0 1 2\n 0 3 4)"             );
test("(1_)'1_(0 0 0;0 1 2;0 3 4)"     , "(1 2\n 3 4)"                         );
test("f:*:;f(|!\\)\\24 40"            , "(24 40\n 16 24\n 8 16\n 0 8)"        );
test("(1,)',5"                        , ",1 5"                                );
test("3{_%x}\\16 16"                  , "(16 16\n 4 4\n 2 2\n 1 1)"           );
test("3(_%)\\16 16"                   , "0 0"                                 );
test("`"                              , "`"                                   );
test("`k5"                            , "`k5"                                 );
test("`."                             , "`."                                  );
test("`ZZVT.OQ"                       , "`ZZVT.OQ"                            );
test("@[2 4 2;0;2*!10]"               , "4 4 2"                               );
test("@[2 4 2;1;2*!10]"               , "2 8 2"                               );
test("@[2 4 2;2;2*!10]"               , "2 4 4"                               );
test("{a[0 1;0 1]:5}"                 , "{a:.[a;(0 1\n 0 1);{[x;y]y};5]}"     );
test("[]"                             , "()!()"                               );
test("[a:0][`a]"                      , "0"                                   );
test("{`a 0}"                         , "{`a@0}"                              );
test('{"a"0}'                         , '{"a"@0}'                             );
test("[a:0]`a"                        , "0"                                   );
fail('"a"0'                           , "function or list expected, found char.");
test('{""   0: "bb"}'                 , '{()0:"bb"}'                          );
test('{"aa" 0: "bb"}'                 , '{"aa"0:"bb"}'                        );
test("a*/:\\:'a:(!2;!3)"              , "((0 0\n  0 1)\n (0 0 0\n  0 1 2\n  0 2 4))");
fail("a:"                             , "noun expected following ':'."        );
test("f:+/#:';f[(2 2;9;8 8 8)]"       , "6"                                   );
test('f:+/=;f["hello";"l"]'           , "2"                                   );
test(".[3 3#0;(0 1;1 0);5]"           , "(5 5 0\n 5 5 0\n 0 0 0)"             );
fail(".[3 3#0;(0 1;1 9);5]"           , "index error."                        );
test(".[3 3#0;(0 1;1 0);2+]"          , "(2 2 0\n 2 2 0\n 0 0 0)"             );
test(".[3 3#!9;(0 1;1 0);|!6]"        , "(5 4 2\n 2 1 5\n 6 7 8)"             );
test(".[3 3#0;(0 1;0 1);{[x;y]y};5]"  , "(5 5 0\n 5 5 0\n 0 0 0)"             );
test(".[3 3#0;(0 1;0 1);:;7]"         , "(7 7 0\n 7 7 0\n 0 0 0)"             );
test("a:3 3#0;a[0 1;0 1]:9;a"         , "(9 9 0\n 9 9 0\n 0 0 0)"             );
test(".[3 3#0;(1 2;0);:;4]"           , "(0 0 0\n 4 0 0\n 4 0 0)"             );
test(',/,"a"'                         , ',"a"'                                );
test(",/,2"                           , ",2"                                  );
test("{x,y}/,2"                       , "2"                                   );
test("(),/,2"                         , ",2"                                  );
test(",'/(0 1 2;3 4 5)"               , "(0 3\n 1 4\n 2 5)"                   );
test("l:1 2 3;l[1 2]:3 3;l"           , "1 3 3"                               );
test("#:'=0 1 1 2 3 5 3 3"            , "0 1 2 3 5!1 2 1 3 1"                 );
test("*:'=0 1 1 2 3 5 3 3"            , "0 1 2 3 5!0 1 3 4 5"                 );
test('<#:\'="abdbbac"'                , '"dcab"'                              );
test("<[a:2;b:5;c:1]"                 , "`c`a`b"                              );
test("0x414243"                       , '"ABC"'                               );
fail("0x41424"                        , "malformed byte string."              );
test("#0x6566"                        , "2"                                   );
test("[a:1+2]"                        , "[a:3]"                               );
test("[a:1+2]`a"                      , "3"                                   );
test("[a:{4}]`a"                      , "{4}"                                 );
test("([a:{4}]`a)[]"                  , "4"                                   );
test("#[2!;!6]"                       , "1 3 5"                               );
test("(2!)#!6"                        , "1 3 5"                               );
test("({2!x})#!6"                     , "1 3 5"                               );
test("{2!x}#!8"                       , "1 3 5 7"                             );
test("{(2!)#!6}"                      , "{((2!))#!6}"                         );
test("(&/)#(1 0 1 1;1 1;0 1 0;1 2 1)" , "(1 1\n 1 2 1)"                       );
test('{x~|x}#("racecar";"nope";"bob")', '("racecar"\n "bob")'                 );
test("{(x<)#1+!2*x}5"                 , "6 7 8 9 10"                          );
test(",/,1 1"                         , "1 1"                                 );
test(',/,"ab"'                        , '"ab"'                                );
test(",/,()"                          , "()"                                  );
test('<("Beta";"Alpha";"Gamma")'      , "1 0 2"                               );
test("<(`canary;`banana;`apple)"      , "2 1 0"                               );
test("[a:1;b:2]+[b:1;a:2]"            , "[a:3;b:3]"                           );
test("[a:1;b:2;c:3]+[b:4;c:5;a:6]"    , "[a:7;b:6;c:8]"                       );
test("[a:1;b:2;c:3]+[b:4;c:5]"        , "[a:1;b:6;c:8]"                       );
test("[a:1;b:2]+[b:4;c:5;a:6]"        , "[a:7;b:6;c:5]"                       );
test("#,(+)"                          , "1"                                   );
test("#,(+=)"                         , "1"                                   );
test("*,(+=)"                         , "(+=)"                                );
test("#(+;-)"                         , "2"                                   );
test("(*,(-:))@5"                     , "-5"                                  );
test("?(,1),2"                        , "1 2"                                 );
test("{*|&(x@y-1)<x}"                 , "{[x;y]*|&(x@y-1)<x}"                 );
test('{&("ABC"@1)<"ABC"}[]'           , ",2"                                  );
test("{x@<x}@-4?3 8 9 2"              , "2 3 8 9"                             );
test("#?-5?10"                        , "5"                                   );
fail("-10?3"                          , "length error."                       );
test("{!5}/0"                         , "0 1 2 3 4"                           );
test("{!5}\\0"                        , "(0\n 0 1 2 3 4)"                     );
test("{!2}'0 1"                       , "(0 1\n 0 1)"                         );
test("{!2}[0]"                        , "0 1"                                 );
test("x:!5;x[,()]:0;x"                , "0 1 2 3 4"                           );
test("x:!3;x[()]:0;x"                 , "0 1 2"                               );
test("[a:1]~[a:1]"                    , "1"                                   );
test("[a:1]~[b:1]"                    , "0"                                   );
test("[a:1]~[a:1;b:2]"                , "0"                                   );
test("[a:1;b:2]~[b:2;a:1]"            , "0"                                   );
test('(!256)["A"]'                    , "65"                                  );
test('(!256)["Bean"]'                 , "66 101 97 110"                       );
test('#?5000?"A"'                     , "26"                                  );
test('#?5000?0+"A"'                   , "65"                                  );
test('@*?10?"A"'                      , "-10"                                 );
test("0x0a"                           , '"\\n"'                               );
test("0x05"                           , "0x05"                                );
test("0x0a05"                         , "0x0a05"                              );
test("0x0102"                         , "0x0102"                              );
test("0x80"                           , "0x80"                                );
fail("0 6_!5"                         , "length error."                       );
test("0 5_!5"                         , "(0 1 2 3 4\n ())"                    );
fail("-1 2_!3"                        , "positive int expected."              );
test("$`beef"                         , '"beef"'                              );
test("$`beef`pork"                    , '("beef"\n "pork")'                   );
test("$[();1;2]"                      , "2"                                   );
test("$[0N;3;4]"                      , "3"                                   );
test("11 22 33@`a`b`c!2 0 1"          , "[a:33;b:11;c:22]"                    );
test("{1+x}@`a`b!3 4"                 , "[a:4;b:5]"                           );
test("+()"                            , "()"                                  );
test("!-5"                            , "-5 -4 -3 -2 -1"                      );
test("!-1"                            , ",-1"                                 );
test("=3"                             , "(1 0 0\n 0 1 0\n 0 0 1)"             );
test("%':1 3 4 2 1"                   , "1 3 1.3333 0.5 0.5"                  );
test('prm "xyz"'                      , '("xyz"\n "xzy"\n "yxz"\n "yzx"\n "zxy"\n "zyx")');
test("prm 2"                          , "(0 1\n 1 0)"                         );
test("2*prm[2]"                       , "(0 2\n 2 0)"                         );
test("sin[2]"                         , "0.9093"                              );
test("sin[1 2]"                       , "0.8415 0.9093"                       );
test("(+/).(1;2 3)"                   , "6"                                   );
test("+/[1;2 4]"                      , "7"                                   );
test("{$[1<#x; |o'x; x]}(1 2;3 4)"    , "(4 3\n 2 1)"                         );
test("+/[2 3]"                        , "5"                                   );
test("+\\[2 3]"                       , "2 5"                                 );
test("{x+1}\\[3;1]"                   , "1 2 3 4"                             );
test("{$[x;(x-1)o(y,2**|y);y]}[3;2]"  , "2 4 8 16"                            );
test("7 in 1 15 3"                    , "0"                                   );
test("10 7 3 9 in 1 15 3"             , "0 0 1 0"                             );
test("(1 2;3 4) in 3 5 7 9"           , "(0 0\n 1 0)"                         );
test("4 in 2*!5"                      , "1"                                   );
test("a:()!();a[2]:3;a"               , "(,2)!,3"                             );
test('a:()!();a["f"]:5;a'             , '(,"f")!,5'                           );
test("3 sin\\2"                       , "2 0.9093 0.7891 0.7097"              );
test("{x,y,z}/[1;2 3;4 5]"            , "1 2 4 3 5"                           );
test("{x,y,z}\\[1;2 3;4 5]"           , "(1\n 1 2 4\n 1 2 4 3 5)"             );
test("{x,y,z}'[1 0;2 3;4 5]"          , "(1 2 4\n 0 3 5)"                     );
test("{x,y,z}'[1;2 3;4 5]"            , "(1 2 4\n 1 3 5)"                     );
test("(`a`b!3 5)@,`b"                 , ",5"                                  );
test("(`a`b!6 9)(,`b)"                , ",9"                                  );
test("(`a`b!3 5)(,`b;`a`b)"           , "(,5\n 3 5)"                          );
test("&`a`b`c!1 0 2"                  , "`a`c`c"                              );
test("10 8_10 20 30!3 5 9"            , "20 30!5 9"                           );
test('"fb"#"fab"!3 5 9'               , '"fb"!3 9'                            );
test('_"ABCdef!"'                     , '"abcdef!"'                           );
test('_"A"'                           , '"a"'                                 );
test("(`a`b!(0 1;1))+`a`b!(2 3;4)"    , "[a:2 4;b:5]"                         );
test(">1 2 2 1"                       , "1 2 0 3"                             );
test('{5#>#:\'=x@<x}"azzzxyabzxy"'    , '"zaxyb"'                             );
test("(9 8!0 1),'9 8!3 4"             , "9 8!(0 3\n 1 4)"                     );
test("(9 8!0 1),'8 9!3 4"             , "9 8!(0 4\n 1 3)"                     );
test("0 2 4 6 8 10'5"                 , "2"                                   );
test("0 2 4 6 8 10'-10 0 4 5 6 20"    , "-1 0 2 2 3 5"                        );
test("1 2 3 3 4'2 3"                  , "1 3"                                 );
test("4 5 6'1"                        , "-1"                                  );
test("6."                             , "6"                                   );
test("123. 45."                       , "123 45"                              );
test("-34."                           , "-34"                                 );
test("1 3.()"                         , "()"                                  );
fail("1 2!3 4 5"                      , "length error."                       );
fail("`a`b`c!`d`e"                    , "length error."                       );
test("c:99;{x,c}'1 2 3"               , "(1 99\n 2 99\n 3 99)"                );
test("c:99;{x,y,c}'[1 2;3 4]"         , "(1 3 99\n 2 4 99)"                   );
test("a:1 2 3;`a[1]"                  , "2"                                   );
test("a:1 4 3;`a @ 1"                 , "4"                                   );
test("a:1 6 3;`a . 1"                 , "6"                                   );
test("a:1 2!3 4;`a 2"                 , "4"                                   );
test("a:5 6!7 8;`a . 5"               , "7"                                   );
test("a:{x+1};`a 5"                   , "6"                                   );
test("a:{x+2};`a . 5"                 , "7"                                   );
test("b:{x*y};`b . 3 5"               , "15"                                  );
test('(2!)#"abcdef"!2 3 4 5 6 7'      , '"bdf"!3 5 7'                         );
test("2 2#()"                         , "((()\n  ())\n (()\n  ()))"           );
test("2 0N#()"                        , "(()\n ())"                           );
test("3 0N#!6"                        , "(0 1\n 2 3\n 4 5)"                   );
test("2 0N#!5"                        , "(0 1\n 2 3 4)"                       );
test("2 0N#!9"                        , "(0 1 2 3\n 4 5 6 7 8)"               );
test("3 0N#!10"                       , "(0 1 2\n 3 4 5\n 6 7 8 9)"           );
test("1 0N#!4"                        , ",0 1 2 3"                            );
test("2 0N#6 7"                       , "(,6\n ,7)"                           );
test("2 0N#9"                         , "(()\n ,9)"                           );
test("0N 2#!6"                        , "(0 1\n 2 3\n 4 5)"                   );
test("0N 2#!5"                        , "(0 1\n 2 3\n ,4)"                    );
test("0N 1#!4"                        , "(,0\n ,1\n ,2\n ,3)"                 );
test("0N 2#()"                        , "()"                                  );
test("0N 2#8"                         , ",,8"                                 );
test("+\\3 3#!9"                      , "(0 1 2\n 3 5 7\n 9 12 15)"           );
test("(+0,)1 2"                       , ",0 1 2"                              );
test('{!x}["AB"!(1 2 3;1 2)]'         , '"AB"'                                );
test('{!x}@"AB"!(1 2 3;1 2)'          , '"AB"'                                );
test('3 5 7@*(;)'                     , '3 5 7'                               );
test('v::v,#v;v;v;v'                  , '(;1;2;3)'                            );
test('(`a`b`c!0 1 1)?1'               , '`b'                                  );
test('(`a`b`c`d!23 14 9 5)?9 14'      , '`c`b'                                );
test('f:2<+/;f(-1+)\\3 3'             , '(3 3\n 2 2\n 1 1)'                   );
test('f:0<_:;f{x%2}\\15'              , '15 7.5 3.75 1.875 0.9375'            );
test('(`a;4)!2 3'                     , '(`a;4)!2 3'                          );
test("(2!)_!6"                        , "0 2 4"                               );
test("{2!x}_!8"                       , "0 2 4 6"                             );
test("(2!)#!6"                        , "1 3 5"                               );
test("{2!x}#!8"                       , "1 3 5 7"                             );
test('(::)'                           , '(::)'                                );
test('(:)[3;5]'                       , '5'                                   );
test('(::)19'                         , '19'                                  );
test('(::)[3;5]'                      , '3'                                   );
test('$"AB"'                          , '"AB"'                                );
test('$("foo";23 45)'                 , '("foo"\n ("23"\n  "45"))'            );
test("3{x*x}':10 12 0 3 5"            , "(100 144 0\n 144 0 9\n 0 9 25)"      );
test("2,/':11 22 33 44 55"            , "(11 22\n 22 33\n 33 44\n 44 55)"     );
test("{x@<x}(1 2 3 4;1 2;1 2 3;,1)"   , "(,1\n 1 2\n 1 2 3\n 1 2 3 4)"        );
test("{x@<x}(5 10;4 10;4 9;9 9)"      , "(4 9\n 4 10\n 5 10\n 9 9)"           );
test("{x@>x}(5 10;4 10;4 9;9 9)"      , "(9 9\n 5 10\n 4 10\n 4 9)"           );
test("{.[%;(3;4);:]}"                 , "{.[(%);3 4;(:)]}"                    );
test(".[%;(3;4);:]"                   , "0 0.75"                              );
test(".[{5+2};();:]"                  , "0 7"                                 );
test(".[!:;,`a;:]"                    , '(1\n "number expected, found symbol.")');
test(".[!:;`a;:]"                     , '(1\n "list expected, found symbol.")');
test(".[*(+;-);1+!2;:]"               , "0 3"                                 );
test("%`x`y!(4,9)"                    , "[x:2;y:3]"                           );
test('1-2-3'                          , '2'                                   );
test('-1-2-3'                         , '0'                                   );
test('1-2-3-4'                        , '-2'                                  );
test('{5>x}{1+x}\\0'                  , '0 1 2 3 4 5'                         );
test('(5>){1+x}\\0'                   , '0 1 2 3 4 5'                         );
test('{5>x}(1+)\\0'                   , '0 1 2 3 4 5'                         );
test('(5>)(1+)\\0'                    , '0 1 2 3 4 5'                         );
test("+55"                            , ",,55"                                );
test('a:b:1 2 3;b[2]:4;(b;a)'         , '(1 2 4\n 1 2 3)'                     );
test('a:b:[k:0];b[`k]:1;(b;a)'        , '([k:1];[k:0])'                       );
test('a:b:(1 2;3 4);b[0;1]:9;(b;a)'   , '((1 9\n  3 4)\n (1 2\n  3 4))'       );

test('x:[x:1;d:2];x[`x]+:x[`d]'       , '[x:3;d:2]'                           );
test('d:2 4#!9;d[1;2 3]:100;d'        , '(0 1 2 3\n 4 5 100 100)'             );
test('d:[k:!5];d[`k;2 3]:100;d'       , '[k:0 1 100 100 4]'                   );
test('d:[k:!5];d[`k;2 3]+:100;d'      , '[k:0 1 102 103 4]'                   );
test('{x[`x`d]+:55}'                  , '{[x]x:.[x;,`x`d;+;55]}'              );
test('{x[`x`d]:55}'                   , '{[x]x:.[x;,`x`d;{[x;y]y};55]}'       );

test('x:[x:1;d:2];x[`x`d]+:55'        , '[x:56;d:57]'                         );
test('x:[x:1;d:2];x[`x`d]+:x`x`d'     , '[x:2;d:4]'                           );
test('x:[x:1;d:2];x[`x`d]+:x[`x`d]'   , '[x:2;d:4]'                           );
test('x:[x:1;d:2];x[`x`d]:55'         , '[x:55;d:55]'                         );
test('x:[x:1;d:2];x[`x`d]:1+x`x`d'    , '[x:2;d:3]'                           );
test('x:[x:1;d:2];x[`x`d]:1+x[`x`d]'  , '[x:2;d:3]'                           );


//test("(+/[;2 3 4])@9"); // 18
//test("+/[;2 3 4]9"); // 18
//test("+\\[;2 3 4]9"); // 11 14 18

//test(".[3 3#0;(0 1;0 1);:;2 2#!4]"    , "(0 1 0\n 2 3 0\n 0 0 0)"             );
//test("a:3 3#0;a[0 1;0 1]:2 2#!4"      , "(0 1 0\n 2 3 0\n 0 0 0)"             );

//test("t:[a:4];t[`b]+:5;t", "[a:4;b:5]");
//test("1 0N=(1 2 3[-7];1 2 3[5])"      , "0 1"                                 );

//files();

// experimental features:
test("f:{{n+::x}.(,`n)!,x}[5];f'2 1 10", "7 8 18");
test("a:5;e:`a`b!2 3;({a::x}.e)[6];(a;e)", "(5;[a:6;b:3])");
test("a:5;b:7;(.{})`a`b", "5 7");
test("f:{}. 1 2!3 4;.f", "1 2!3 4");

// NOTES/TODO:

// I need to eagerly evaluate portions of sticky expressions wherever possible:
//test("f:(1+2)+", "3+");
//test("a:1;b:a+;a:2;b 3", "4");

// clear up application/dict ambiguity.
// f[a:1]  is f.,(a:1)
// f [a:1] is f.,[a:1]

// I need to unify the two definitions of nil floating around currently

// verb-func unification?
//   This would simplify a great deal of dispatch logic and remove the need for
//   amend/dmend/query to be special syntactic cases.

if (fails) { console.log(fails + " TEST(S) DID NOT COMPLETE SUCCESSFULLY."); }
else       { console.log("passed "+tests+" tests!"); }
